<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dawn-K's Blog</title>
    <description>From ashes to the empire</description>
    <link>https://dawn-k.github.io/</link>
    <atom:link href="https://dawn-k.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 07 Feb 2021 18:25:27 +0800</pubDate>
    <lastBuildDate>Sun, 07 Feb 2021 18:25:27 +0800</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>「android」 网络</title>
        <description>&lt;h1 id=&quot;网络&quot;&gt;网络&lt;/h1&gt;

&lt;h2 id=&quot;原生http&quot;&gt;原生http&lt;/h2&gt;

&lt;h3 id=&quot;界面&quot;&gt;界面&lt;/h3&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/send_request&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Send Request&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;ScrollView&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/response_text&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ScrollView&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在界面上显示获得的报文&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;TextView responseText;
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    Button sendRequest = (Button) findViewById(R.id.send_request);
    responseText = (TextView) findViewById(R.id.response_text);
    sendRequest.setOnClickListener(this);
}
private void showResponse(final String response_text) {
    // 必须在主进程中才能修改UI
    runOnUiThread(new Runnable() {
        @Override
        public void run() {
            responseText.setText(response_text);
        }
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;连接http&quot;&gt;连接http&lt;/h3&gt;

&lt;p&gt;测试原生的Http连接方式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;
void sendRequestWithHttpURLConnection() {
    new Thread(new Runnable() {
        @Override
        public void run() {
            HttpURLConnection connection = null;
            BufferedReader reader = null;
            try {
                // 建立连接
                URL url = new URL(&quot;https://dawn-k.github.io&quot;);
                connection = (HttpURLConnection) url.openConnection();
                connection.setRequestMethod(&quot;GET&quot;);
                connection.setConnectTimeout(8000);
                connection.setReadTimeout(8000);

                // 获取服务返回的流
                InputStream in = connection.getInputStream();
                reader = new BufferedReader(new InputStreamReader(in));

                // 拼接成 response
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                // 在界面上显示出来
                showResponse(response.toString());
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (reader != null) {
                    try {
                        reader.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                if (connection != null) {
                    connection.disconnect();
                }
            }
        }
    }).start();
    // 上面一行很容易漏下,一定要注意
}
// 注册监听器
@Override
public void onClick(View v) {
    switch (v.getId()) {
        case R.id.send_request:
            sendRequestWithHttpURLConnection();
            break;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;权限&quot;&gt;权限&lt;/h3&gt;

&lt;p&gt;需要网络权限&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.INTERNET&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;okhttp&quot;&gt;OkHttp&lt;/h2&gt;

&lt;p&gt;OkHttp 是一个通用的流行的开源库.
界面和 showResponse 我们采用和上文一样的方式.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;void testOKHttp() {
    new Thread(new Runnable() {
        @Override
        public void run() {
            try {
                // 构建GET方法的请求
                Request request = new Request.Builder()
                        .url(&quot;http://www.baidu.com&quot;)
                        .build();
                // 发起请求
                OkHttpClient client = new OkHttpClient();
                Response response = client.newCall(request).execute();
                String responseData = response.body().string();
                // 显示数据
                showResponse(responseData);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }).start();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后修改 onClick 方法中点击按钮对应的函数为 testOKHttp&lt;/p&gt;

&lt;h3 id=&quot;post&quot;&gt;post&lt;/h3&gt;

&lt;p&gt;post请求需要修改如下.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;// 构建一个请求体(也就是想传的参数)
RequestBody requestBody = new FormBody.Builder()
        .add(&quot;username&quot;, &quot;admin&quot;)
        .add(&quot;password&quot;, &quot;123456&quot;)
        .build();
// 发起post请求
Request request = new Request.Builder()
        .url(&quot;http://www.baidu.com&quot;)
        .post(requestBody)
        .build();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;剩下的部分和之前的一样&lt;/p&gt;

&lt;h2 id=&quot;配置服务器&quot;&gt;配置服务器&lt;/h2&gt;

&lt;p&gt;下载 &lt;a href=&quot;https://jingyan.baidu.com/article/29697b912f6539ab20de3cf8.html&quot;&gt;Apache httpd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;假设安装位置为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D:/myDevEnvironment/Apache24&lt;/code&gt; , 下述 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APACHE_HOME&lt;/code&gt; .
先在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%APACHE_HOME/conf/httpd.conf&lt;/code&gt; 里面, 把安装位置修改为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-BASH&quot;&gt;Define SRVROOT &quot;D:/myDevEnvironment/Apache24&quot;
ServerRoot &quot;${SRVROOT}&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在命令行中进入 %APACHE_HOME/bin , 然后输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httpd -k install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;最后打开bin下的 ApacheMonitor.exe , 然后启动服务, 在浏览器里输入 127.0.0.1 即可访问到 Apache 默认页面了. 可以在刚才的配置文件中改端口, 默认是80&lt;/p&gt;

&lt;p&gt;下文的文件都放在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%APACHE_HOME/htdocs&lt;/code&gt; 下即可. 可通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1/file_name&lt;/code&gt; 访问&lt;/p&gt;

&lt;h2 id=&quot;解析-xml&quot;&gt;解析 xml&lt;/h2&gt;

&lt;p&gt;准备好get_data.xml文件&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;apps&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;app&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Google Maps&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/app&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;app&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Chrome&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/app&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;app&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Google Play&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/app&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/apps&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;xmlpullparser&quot;&gt;XmlPullParser&lt;/h3&gt;

&lt;p&gt;原生的解决方式, 直接用 XmlPullParser&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;void testOKHttp() {
    new Thread(new Runnable() {
        @Override
        public void run() {
            try {
                // 宿主机测试时用 127.0.0.1
                // 对于手机来说,宿主机就是 10.0.2.2
                Request request = new Request.Builder()
                        .url(&quot;http://10.0.2.2/get_data.xml&quot;)
                        .build();
                OkHttpClient client = new OkHttpClient();
                Response response = client.newCall(request).execute();
                String responseData = response.body().string();
                parseXMLWithPull(responseData);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }).start();
}
private void parseXMLWithPull(String xmlData) {
    try {
        XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
        XmlPullParser xmlPullParser = factory.newPullParser();
        xmlPullParser.setInput(new StringReader(xmlData));
        int eventType = xmlPullParser.getEventType();
        String id = &quot;&quot;;
        String name = &quot;&quot;;
        String version = &quot;&quot;;
        // 一直循环到文件结尾
        while (eventType != XmlPullParser.END_DOCUMENT) {
            // 当前元素的名字(比如 &amp;lt;app&amp;gt; 1 &amp;lt;/app&amp;gt;这种)
            String nodeName = xmlPullParser.getName();
            // 判断类型
            switch (eventType) {
                case XmlPullParser.START_TAG:
                    // 对于相应的类型,将下一个元素存入字符串(因为当前的还是标签)
                    if (&quot;id&quot;.equals(nodeName)) {
                        id = xmlPullParser.nextText();
                    } else if (&quot;name&quot;.equals(nodeName)) {
                        name = xmlPullParser.nextText();
                    } else if (&quot;version&quot;.equals(nodeName)) {
                        version = xmlPullParser.nextText();
                    }
                    break;
                case XmlPullParser.END_TAG:
                    if (&quot;app&quot;.equals(nodeName)) {
                        Log.d(&quot;MainActivity&quot;, &quot;id is &quot; + id);
                        Log.d(&quot;MainActivity&quot;, &quot;name is &quot; + name);
                        Log.d(&quot;MainActivity&quot;, &quot;version is &quot; + version);
                    }
                    break;
                default:
                    break;
            }
            eventType = xmlPullParser.next();
        }

    } catch (Exception e) {
        e.printStackTrace();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;书上还提到了一种 SAX方法, 此处不再赘述.&lt;/p&gt;

&lt;h2 id=&quot;解析-json&quot;&gt;解析 json&lt;/h2&gt;

&lt;p&gt;准备好get_data.json文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JS&quot;&gt;[{
        &quot;id&quot;: &quot;5&quot;,
        &quot;version&quot;: &quot;5.5&quot;,
        &quot;name&quot;: &quot;Clash of Clans&quot;
    },
    {
        &quot;id&quot;: &quot;6&quot;,
        &quot;version&quot;: &quot;7.0&quot;,
        &quot;name&quot;: &quot;Boom Beach&quot;
    },
    {
        &quot;id&quot;: &quot;7&quot;,
        &quot;version&quot;: &quot;5.5&quot;,
        &quot;name&quot;: &quot;Clash Royale&quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;jsonobject&quot;&gt;JSONObject&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;private void parseJSONWithJSONObject(String jsonData) {
    try {
        JSONArray jsonArray = new JSONArray(jsonData);
        for (int i = 0; i &amp;lt; jsonArray.length(); i++) {
            JSONObject jsonObject = jsonArray.getJSONObject(i);
            String id = jsonObject.getString(&quot;id&quot;);
            Log.d(&quot;MainActivity&quot;, &quot;id is &quot; + id);
            String name = jsonObject.getString(&quot;name&quot;);
            Log.d(&quot;MainActivity&quot;, &quot;name is &quot; + name);
            String version = jsonObject.getString(&quot;version&quot;);
            Log.d(&quot;MainActivity&quot;, &quot;version is &quot; + version);
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;gson&quot;&gt;GSON&lt;/h3&gt;

&lt;p&gt;新建 app类, 此处略去 getter 和 setter&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;class App {
    private String id, name, version;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后添加依赖&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.google.code.gson:gson:2.8.5'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后编写解析函数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;private void parseJSONWithGSON(String jsonData) {
    Gson gson = new Gson();
    List&amp;lt;App&amp;gt; appList = gson.fromJson(jsonData, new TypeToken&amp;lt;List&amp;lt;App&amp;gt;&amp;gt;() {
    }.getType());
    for (App app : appList) {
        Log.d(&quot;MainActivity&quot;, &quot;id is &quot; + app.getId());
        Log.d(&quot;MainActivity&quot;, &quot;name is &quot; + app.getName());
        Log.d(&quot;MainActivity&quot;, &quot;version is &quot; + app.getVersion());
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;httputil&quot;&gt;HttpUtil&lt;/h2&gt;

&lt;p&gt;创建一个通用的工具类, 进行封装
先创建一个接口类&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;public interface HttpCallbackListener {
    void onFinish(String response);

    void onError(Exception e);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再创建  HttpUtil (其实若是只使用里面的 OkHttp, 然后把原生的删掉的话就不需要上面的接口类了)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;
import android.content.pm.PackageManager;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

import okhttp3.Call;
import okhttp3.FormBody;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okio.BufferedSink;

public class HttpUtil {
    /*
使用方法:
HttpUtil.sendHttpRequest(&quot;http://www.baidu.com&quot;, new okhttp3.Callback() {
    @Override
    public void onError(Exception e) {
        // 处理异常情况
    }

    @Override
    public void onFinish(String response){

        // 得到服务器返回的具体内容
        String responseData = response.body().string();
    }
});
 */
    public static void sendHttpRequest(final String address, final HttpCallbackListener listener) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                HttpURLConnection connection = null;
                try {
                    URL url = new URL(address);
                    connection = (HttpURLConnection) url.openConnection();
                    connection.setRequestMethod(&quot;GET&quot;);
                    connection.setConnectTimeout(8000);
                    connection.setReadTimeout(8000);
                    connection.setDoInput(true);
                    connection.setDoOutput(true);
                    InputStream in = connection.getInputStream();
                    BufferedReader reader = new BufferedReader(new InputStreamReader(in));
                    StringBuilder response = new StringBuilder();
                    String line;
                    while ((line = reader.readLine()) != null) {
                        response.append(line);
                    }
                } catch (Exception e) {
                    if (listener != null) {
                        listener.onError(e);
                    }
                } finally {
                    if (connection != null) {
                        connection.disconnect();
                    }
                }
            }
        }).start();
    }

        /*
        使用方法:
        HttpUtil.sendOkHttpRequest(&quot;http://www.baidu.com&quot;, new okhttp3.Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                // 处理异常情况
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {

                // 得到服务器返回的具体内容
                String responseData = response.body().string();
            }
        });
         */

    public static void sendOkHttpRequest(String address, okhttp3.Callback callback) {
        OkHttpClient client = new OkHttpClient();
        Request request = new Request.Builder()
                .url(address)
                .build();
        client.newCall(request).enqueue(callback);
    }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sun, 24 Jan 2021 00:00:00 +0800</pubDate>
        <link>https://dawn-k.github.io/android/2021/01/24/%E7%BD%91%E7%BB%9C/</link>
        <guid isPermaLink="true">https://dawn-k.github.io/android/2021/01/24/%E7%BD%91%E7%BB%9C/</guid>
        
        <category>android</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>「CodeNote」 STL常用组件</title>
        <description>&lt;h1 id=&quot;stl常用组件&quot;&gt;STL常用组件&lt;/h1&gt;

&lt;p&gt;[toc]&lt;/p&gt;

&lt;h2 id=&quot;函数&quot;&gt;函数&lt;/h2&gt;

&lt;h3 id=&quot;fill&quot;&gt;fill&lt;/h3&gt;

&lt;p&gt;需要 algorithm
fill速度和手动for赋值基本相同&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// 将a在[2,5)区间赋值为3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 相比于memset, 它可以赋值任何数, 也可以对容器使用.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;黑科技&quot;&gt;黑科技&lt;/h2&gt;

&lt;h3 id=&quot;自定义hash&quot;&gt;自定义hash&lt;/h3&gt;

&lt;p&gt;网上流行的一个简单实现如下&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;pair_hash&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;unordered_map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair_hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是根据 &lt;a href=&quot;https://youngforest.github.io/2020/05/27/unordered-map-hash-pair-c/&quot;&gt;这个博客&lt;/a&gt; , 发现这个方法碰撞的很频繁, 不合理&lt;/p&gt;

&lt;p&gt;所以就有如下的方案(但是太臃肿了)&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;c1&quot;&gt;// from boost (functional/hash):&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// see http://www.boost.org/doc/libs/1_35_0/doc/html/hash/combine.html template&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hash_combine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x9e3779b9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// auxiliary generic functions to create a hash value using a seed&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hash_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hash_combine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hash_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Types&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hash_combine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hash_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hash_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Types&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hash_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;pair_hash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unordered_map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair_hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slopeCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unordered_set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair_hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;优先队列重载&quot;&gt;优先队列重载&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_35866453/article/details/78263685?utm_source=blogkpcl11&quot;&gt;参考资料&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在优先队列的声明中, 传入一个结构体, 可以理解为重载小于号. 而优先队列默认是从大到小的. 所以&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// 最大值优先 等价于 递减 等价于 less&amp;lt;T&amp;gt; 等价于 a &amp;lt; b&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;cmp1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//最小值优先  &lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;cmp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//最大值优先  &lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 22 Jan 2021 00:00:00 +0800</pubDate>
        <link>https://dawn-k.github.io/codenote/2021/01/22/STL%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/</link>
        <guid isPermaLink="true">https://dawn-k.github.io/codenote/2021/01/22/STL%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/</guid>
        
        <category>CodeNote</category>
        
        
        <category>CodeNote</category>
        
      </item>
    
      <item>
        <title>「android」 多媒体</title>
        <description>&lt;h1 id=&quot;多媒体&quot;&gt;多媒体&lt;/h1&gt;

&lt;p&gt;[toc]&lt;/p&gt;

&lt;h2 id=&quot;通知&quot;&gt;通知&lt;/h2&gt;

&lt;p&gt;书上的代码有一点过时, 所调用的方法的参数已经被废弃了.
如果想在自己手机测试的话一定要在应用的设置中打开此应用的通知提示以及声音开关&lt;/p&gt;

&lt;p&gt;首先新建一个按钮, 名为 send_notice
然后新建一个活动, 名为 NotificationActivity , 里面随便写个 TextView , 作为点击通知后的显示界面&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    testNotification();
}

void testNotification() {
    Button sendNotice = (Button) findViewById(R.id.send_notice);
    sendNotice.setOnClickListener(this);
}

@Override
public void onClick(View v) {
    switch (v.getId()) {
        case R.id.send_notice:
            // 创建显示打开 NotificationActivity 的 Intent
            Intent intent = new Intent(this, NotificationActivity.class);
            // 创建点击按钮时的 Intent , 第一个是 content 第二个书上未提及,就填0即可  第三个是刚才创建的 intent , 第四个是行为,此处用不到
            PendingIntent pi = PendingIntent.getActivity(this, 0, intent, 0);
            NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
            // 如果版本比较高,需要先新建 channel,否则后面代码运行报错(找不到 channel )
            if (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.O) {
                String channelId = &quot;default&quot;;
                String channelName = &quot;默认通知&quot;;
                manager.createNotificationChannel(new NotificationChannel(channelId, channelName, NotificationManager.IMPORTANCE_HIGH));
            }
            // 这里是建造者模式,先设置通知的属性再建造出通知
            // 起初 Builder 的构造函数不用指定 channel ,但是现在必须要指定了,就用上段代码创建的 default
            // ContentIntent 是为了设置点击通知时的切换事件
            // AutoCancel 是设置点击通知后,通知不会继续驻留在通知栏中
            // setWhen() 此处传入的参数是系统当前的以毫秒为单位的时间
            // setStyle应该是只能设置一种风格(此处存疑),要么是大量文字(与 setContentText 冲突),要么是大图片
            // 大量文字的显示只能在下拉通知栏里看到
            // setPriority 是设置通知的优先级 
            Notification notification = new NotificationCompat.Builder(this, &quot;default&quot;)
                    .setContentTitle(&quot;This is content title&quot;)
                    .setContentText(&quot;This is content text&quot;)
                    .setWhen(System.currentTimeMillis())
                    .setSmallIcon(R.mipmap.ic_launcher)
                    .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))
                    .setContentIntent(pi)
                    .setAutoCancel(true)
                    .setSound(Uri.fromFile(new File(&quot;/system/demia/audio/ringtones/Luna.ogg&quot;)))
                    .setStyle(new NotificationCompat.BigTextStyle().bigText(&quot;Learn how to build notifications,send and sync data, and use voice actions.Get the official Android IDE and developer tools to build apps for Android.&quot;))
                    .setStyle(new NotificationCompat.BigPictureStyle().bigPicture(BitmapFactory.decodeResource(getResources(), R.drawable.big_image)))
                    .setPriority(NotificationCompat.PRIORITY_MAX)
                    .build();
            // 让通知显示出来,第一个参数是给通知加一个标识符(可以通过另一种方法关闭的时候直接传入此标识符就可以关闭了),第二个参数传入通知本身
            manager.notify(1, notification);
            break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;相机&quot;&gt;相机&lt;/h2&gt;

&lt;p&gt;相机的调用稍微复杂一些.&lt;/p&gt;

&lt;h3 id=&quot;界面&quot;&gt;界面&lt;/h3&gt;

&lt;p&gt;首先新建一个按钮和一个图片视图.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/take_photo&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Take Photo&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;ImageView&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/picture&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_gravity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center_horizontal&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;并且在 MainActivity上实例化(将 ImageView 的实例化设置为成员变量)&lt;/p&gt;

&lt;h3 id=&quot;打开相机&quot;&gt;打开相机&lt;/h3&gt;

&lt;p&gt;给 按钮设置监听器, 监听器代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;public static final int TAKE_PHOTO = 1;
public void onClick(View v) {
    switch (v.getId()) {
        case R.id.take_photo:
            //  存放在应用关联缓存目录
            // /sdcard/Android/data/&amp;lt;package name&amp;gt;/cache
            // 存放在和这个位置是不需要运行权限处理的,其他的位置是需要的
            File outputImage = new File(getExternalCacheDir(), &quot;output_image.jpg&quot;);
            try {
                if (outputImage.exists()) {
                    outputImage.delete();
                }
                outputImage.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
            // 高版本的必须使用这种特殊的内容提供器,否则会报错
            if (Build.VERSION.SDK_INT &amp;gt;= 24) {
                // 三个参数: 上下文,任意唯一的字符串,刚才生成的图像对象
                imageUri = FileProvider.getUriForFile(MainActivity.this, &quot;com.example.dvtester.fileprovider&quot;, outputImage);
            } else {
                imageUri = Uri.fromFile(outputImage);
            }

            // 打开相机
            Intent intent1 = new Intent(&quot;android.media.action.IMAGE_CAPTURE&quot;);
            intent1.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);
            // 回调
            startActivityForResult(intent1, TAKE_PHOTO);
            break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上文代码中提到的内容提供器, 需要自己构建
在 AndroidManifest 文件下, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;application&amp;gt;&lt;/code&gt; 标签中, 加入如下内容&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--书上的 andriod开头的 name已经失效了,需要用这个才能编译通过--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;provider&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;androidx.core.content.FileProvider&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:authorities=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.dvtester.fileprovider&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:exported=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:grantUriPermissions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!--一定注意拼写,刚才就有个地方拼错了--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 指定共享路径 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta-data&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.support.FILE_PROVIDER_PATHS&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:resource=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@xml/file_paths&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/provider&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上文的@xml部分会报错, 下面就来创建这个xml文件
新建 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res/xml/file_paths&lt;/code&gt; , 填入如下内容
这个文件的作用可以看 &lt;a href=&quot;https://blog.csdn.net/leilifengxingmw/article/details/57405908&quot;&gt;这个博文&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;paths&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- path部分填入 . 或者 / 均可,但是不能不填(书上给的不填已经无法通过编译了) --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;external-path&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my_images&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/paths&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后为了兼容老版本, 还需要在 AndroidManifest中 加入一个访问SD卡的权限&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;显示图片&quot;&gt;显示图片&lt;/h3&gt;

&lt;p&gt;既然刚才在设置监听器的时候已经指定了 startActivityForResult , 所以还需要重载 onActivityResult 函数
重载如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;@Override
protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
    // 书上没有call super,但是不加会错误
    super.onActivityResult(requestCode, resultCode, data);
    switch (requestCode) {
        case TAKE_PHOTO:
            if (resultCode == RESULT_OK) {
                try {
                    Bitmap bitmap = BitmapFactory.decodeStream(getContentResolver().openInputStream(imageUri));
                    // 设置 photoView 显示
                    picture.setImageBitmap(bitmap);
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } 
            }
            break;
        default:
            break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;从相册中打开&quot;&gt;从相册中打开&lt;/h2&gt;

&lt;h3 id=&quot;界面-1&quot;&gt;界面&lt;/h3&gt;

&lt;p&gt;绘制一个按钮和 ImageView即可&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/choose_from_album&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Choose From Album&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;ImageView&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/picture&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_gravity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center_horizontal&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对象实例化&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;ImageView picture;
public static final int CHOOSE_PHOTO = 2;
void testOpenAlbum() {
    Button chooseFromAlbum = (Button) findViewById(R.id.choose_from_album);
    chooseFromAlbum.setOnClickListener(this);
    picture = (ImageView) findViewById(R.id.picture);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;实现功能&quot;&gt;实现功能&lt;/h3&gt;

&lt;p&gt;构建打开相册的Intent&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;private void openAlbum() {
    Intent intent = new Intent(&quot;android.intent.action.GET_CONTENT&quot;);
    intent.setType(&quot;image/*&quot;);
    startActivityForResult(intent, CHOOSE_PHOTO);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注册点击按钮的监听器&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;@Override
public void onClick(View v) {
    switch (v.getId()) {
        case R.id.choose_from_album:
            if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, OPEN_ALBUM_REQUEST_CODE);
            } else {
                openAlbum();
            }
        break;
    }
}
// 申请权限的回调
@Override
public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
    switch (requestCode) {
        case OPEN_ALBUM_REQUEST_CODE:
            if (grantResults.length &amp;gt; 0 &amp;amp;&amp;amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // 刚才的权限申请成功,可以读取了
                openAlbum();
            } else {
                Toast.makeText(this, &quot;You deied the permission&quot;, Toast.LENGTH_SHORT).show();
            }
            break;
        default:
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于读取图片的api在19版本发生了变动, 所以就要判断版本然后再打开.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;// 通过uri获取图片路径
private String getImagePath(Uri uri, String selection) {
    String path = null;
    Cursor cursor = getContentResolver().query(uri, null, selection, null, null);
    if (cursor != null) {
        if (cursor.moveToFirst()) {
            path = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA));
        }
        cursor.close();
    }
    return path;
}

// 展示图片(通用)
// 先从路径读取并解码为bitmap,然后传给 ImageView
private void displayImage(String imagePath) {
    if (imagePath != null) {
        Bitmap bitmap = BitmapFactory.decodeFile(imagePath);
        picture.setImageBitmap(bitmap);
    } else {
        Toast.makeText(this, &quot;failed to get image&quot;, Toast.LENGTH_SHORT).show();
    }
}

// 略复杂
@TargetApi(19)
private void handleImagaeOnKitKat(Intent data) {
    String imagePath = null;
    Uri uri = data.getData();
    if (DocumentsContract.isDocumentUri(this, uri)) {
        String docId = DocumentsContract.getDocumentId(uri);
        if (&quot;com.android.providers.media.documents&quot;.equals(uri.getAuthority())) {
            String id = docId.split(&quot;:&quot;)[1];
            String selection = MediaStore.Images.Media._ID + &quot;=&quot; + id;
            imagePath = getImagePath(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, selection);
        } else if (&quot;com.android.providers.downloads.documents&quot;.equals(uri.getAuthority())) {
            Uri contentUri = ContentUris.withAppendedId(Uri.parse(&quot;content://downloads/pubilc)downloads&quot;), Long.valueOf(docId));
            imagePath = getImagePath(contentUri, null);
        }
    } else if (&quot;content&quot;.equalsIgnoreCase(uri.getScheme())) {
        imagePath = getImagePath(uri, null);
    } else if (&quot;file&quot;.equalsIgnoreCase(uri.getScheme())) {
        imagePath = uri.getPath();
    }
    displayImage(imagePath);
}

// 这个是比较简单的
// 直接从 Intent 里面读取 Uri,找到图片的路径,然后显示图片
private void handleImageBeforeKitKat(Intent data) {
    Uri uri = data.getData();
    String imagePath = getImagePath(uri, null);
    displayImage(imagePath);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于之前的Intent要求回调, 所以这里是重载 onActivityResult 函数, 然后使用刚才实现的的两个方法进行图片的显示.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onActivityResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 书上没有call super&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onActivityResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;CHOOSE_PHOTO:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RESULT_OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SDK_INT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;handleImagaeOnKitKat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;handleImageBeforeKitKat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;播放器&quot;&gt;播放器&lt;/h2&gt;

&lt;p&gt;播放视频与播放音频几乎一致, 故此处仅以音频为例&lt;/p&gt;

&lt;p&gt;新增播放, 暂停, 停止 按钮.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/play&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Play&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/pause&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Pause&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/stop&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Stop&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实例化界面, &lt;strong&gt;并且在手机sd卡的根目录放置一个&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;music.mp3&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;// 初始化播放器
private void initMediaPlayer() {
    try {
        File file = new File(Environment.getExternalStorageDirectory(), &quot;music.mp3&quot;);
        mediaPlayer.setDataSource(file.getPath());
        mediaPlayer.prepare();
    } catch (Exception e) {
        e.printStackTrace();
    }
}
// 实例化控件 + 申请权限
private void testPlay() {
    Button play = (Button) findViewById(R.id.play);
    Button pause = (Button) findViewById(R.id.pause);
    Button stop = (Button) findViewById(R.id.stop);
    play.setOnClickListener(this);
    pause.setOnClickListener(this);
    stop.setOnClickListener(this);
    if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
        ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, MEDIA_PLAYER_REQUEST_CODE);
    } else {
        initMediaPlayer();
    }
}
@Override
public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
    switch (requestCode) {
        case MEDIA_PLAYER_REQUEST_CODE:
            if (grantResults.length &amp;gt; 0 &amp;amp;&amp;amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // 刚才的权限申请成功,可以读取了
                initMediaPlayer();
            } else {
                Toast.makeText(this, &quot;You deied the permission&quot;, Toast.LENGTH_SHORT).show();
                // 未申请权限直接关闭程序
                finish();
            }
            break;
        default:
    }
}

public static final int MEDIA_PLAYER_REQUEST_CODE = 4;
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    testPlay();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;监听器&quot;&gt;监听器&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;public void onClick(View v) {
    switch (v.getId()) {
        case R.id.play:
            if (!mediaPlayer.isPlaying()) {
                mediaPlayer.start();
            }
            break;
        case R.id.pause:
            if (mediaPlayer.isPlaying()) {
                mediaPlayer.pause();
            }
            break;
        case R.id.stop:
            if (mediaPlayer.isPlaying()) {
                mediaPlayer.reset();
                initMediaPlayer();
            }
            break;
        default:
            break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;回收资源&quot;&gt;回收资源&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;// 资源回收
@Override
protected void onDestroy() {
    super.onDestroy();
    if (mediaPlayer != null) {
        mediaPlayer.stop();
        mediaPlayer.release();
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 20 Jan 2021 00:00:00 +0800</pubDate>
        <link>https://dawn-k.github.io/android/2021/01/20/%E5%A4%9A%E5%AA%92%E4%BD%93/</link>
        <guid isPermaLink="true">https://dawn-k.github.io/android/2021/01/20/%E5%A4%9A%E5%AA%92%E4%BD%93/</guid>
        
        <category>android</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>「Java」 面向对象</title>
        <description>&lt;h1 id=&quot;面向对象&quot;&gt;面向对象&lt;/h1&gt;

&lt;h2 id=&quot;接口与抽象类的区别&quot;&gt;接口与抽象类的区别&lt;/h2&gt;

&lt;h3 id=&quot;语法区别&quot;&gt;语法区别&lt;/h3&gt;

&lt;p&gt;1)抽象类可以提供成员方法的实现细节, 而接口中只能存在 public abstract 方法; 
2)抽象类中的成员变量可以是各种类型的, 而接口中的成员变量只能是 public static final类型的; 
3)接口中不能含有静态代码块以及静态方法, 而抽象类可以有静态代码块和静态方法; 
4)一个类只能继承一个抽象类, 而一个类却可以实现多个接口.&lt;/p&gt;

&lt;h3 id=&quot;设计上的区别&quot;&gt;设计上的区别&lt;/h3&gt;

&lt;p&gt;抽象类是对事物的抽象, 而接口是对行为的抽象.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;抽象类除了行为之外还具有一些属性(成员), 或者一些特有的性质(自身已经实现的方法). 而子类在继承时, 不仅继承了属性, 还继承了方法, 所以就导致了子类必然是属于父类的, 只是父类的特化版. 比如喷气式飞机相对于飞机, 跑车相对于车.&lt;/li&gt;
  &lt;li&gt;接口是仅仅对行为进行描述, 并且一个类可以实现多个接口. 子类实现接口时, 并不一定是属于接口这个范畴的, 而只是具有接口的方法. 比如”飞”, 飞机可以飞, 鸟可以飞. 飞机和鸟都实现了飞的接口, 都具有飞的功能. 而鸟和飞机并不会属于同一类.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有个鲜明的例子, 比如门这个抽象类, 具有开门和关门这两个抽象方法. 现在要新增报警方法, 如果在抽象类中直接进行加入, 那么以门为派生的所有门都要被迫实现报警这个功能了. 这是不合理的, 因为不是所有门都可以报警, 但是所有门都可以开关. 所以应该把警报设置成接口, 因为烟雾报警器之类的也可以报警, 报警应当是个功能, 而不是门固有的方法.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jan 2021 00:00:00 +0800</pubDate>
        <link>https://dawn-k.github.io/java/2021/01/20/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
        <guid isPermaLink="true">https://dawn-k.github.io/java/2021/01/20/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
        
        <category>Java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>「android」 MVC</title>
        <description>&lt;h1 id=&quot;mvc&quot;&gt;MVC&lt;/h1&gt;

&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;

&lt;p&gt;MVC (Model-View-Controller)：M是指逻辑模型，V是指视图模型，C则是控制器。一个逻辑模型可以对于多种视图模型. 而控制器就是为了保证数据一致. 这个与观察者模式相同.&lt;/p&gt;

&lt;h2 id=&quot;视图层view&quot;&gt;视图层(View)&lt;/h2&gt;

&lt;p&gt;视图代表模型包含的数据的可视化。&lt;/p&gt;

&lt;h2 id=&quot;控制层controller&quot;&gt;控制层(Controller)&lt;/h2&gt;

&lt;p&gt;它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。控制业务逻辑的实现.&lt;/p&gt;

&lt;h2 id=&quot;模型层model&quot;&gt;模型层(Model)&lt;/h2&gt;

&lt;p&gt;M一般是类似JavaBean之类的东西, 只是数据逻辑的处理.&lt;/p&gt;

&lt;h2 id=&quot;数据流向&quot;&gt;数据流向&lt;/h2&gt;

&lt;p&gt;View -&amp;gt; Controller :
视图事件变化, 传递事件&lt;/p&gt;

&lt;p&gt;Controller -&amp;gt; Model:
更新数据&lt;/p&gt;

&lt;p&gt;Model -&amp;gt; View:
更新界面, 传递数据&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jan 2021 00:00:00 +0800</pubDate>
        <link>https://dawn-k.github.io/android/2021/01/18/MVC/</link>
        <guid isPermaLink="true">https://dawn-k.github.io/android/2021/01/18/MVC/</guid>
        
        <category>android</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>「android」 内容提供器</title>
        <description>&lt;h1 id=&quot;内容提供器&quot;&gt;内容提供器&lt;/h1&gt;

&lt;h2 id=&quot;权限&quot;&gt;权限&lt;/h2&gt;

&lt;p&gt;以拨号(之前是打开拨号界面, 此处是指直接拨号)为例分析权限申请和使用的过程.&lt;/p&gt;

&lt;p&gt;还是基于Intent, 和之前一样, 给一个按钮增加点击的监听器, 重载onClick, 写入如下内容. 为防止权限被拒绝时程序崩溃, 所以此处需要捕获异常.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;try {
    // DIAL 是 打开拨号界面, CALL 是直接拨号,必须申请权限
    Intent intent = new Intent(Intent.ACTION_CALL);
    intent.setData(Uri.parse(&quot;tel:10086&quot;));
    startActivity(intent);
} catch (SecurityException e) {
    e.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后修改 AndroidManifest 文件, 加入如下内容&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.CALL_PHONE&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是以上功能仅能在 安卓6.0以下才能成功. 更高的版本还需要运行时权限申请&lt;/p&gt;

&lt;h3 id=&quot;完整代码&quot;&gt;完整代码&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;package com.example.dvtester;
// Import已被删掉
public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        openWebView();
        testCall();
    }

    void testCall() {
        Button makeCall = (Button) findViewById(R.id.make_call);
        makeCall.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 确定是否已经获得了这个权限,如果相等就是获得了,否则就是没获得
                if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {
                    // 向用户申请权限,第一个参数是获取权限的活动,第二个是要申请权限的列表,第三个是请求码(好像是为了标志唯一的请求)
                    ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.CALL_PHONE}, 1);
                } else {
                    // 之前就有权限,可以直接打了
                    call();
                }
            }
        });
    }

    void call() {
        // 已经有权限了,可以用intent来拨号了
        try {
            // DIAL 是 打开拨号界面, CALL 是直接拨号,必须申请权限
            Intent intent = new Intent(Intent.ACTION_CALL);
            intent.setData(Uri.parse(&quot;tel:10086&quot;));
            startActivity(intent);
        } catch (SecurityException e) {
            e.printStackTrace();
        }
    }

    // 无论成功与否,发出申请(requestPermission)后这个函数都会回调
    // 第一个参数是请求码,与申请时的相同,第二个是当时请求的权限数组 , 第三个是申请的结果数组,也就是用于和PackageManager.PERMISSION_GRANTED比较
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        switch (requestCode) {
            case 1:
                if (grantResults.length &amp;gt; 0 &amp;amp;&amp;amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    // 刚才的权限申请成功,可以打了
                    call();
                } else {
                    Toast.makeText(this, &quot;You deied the permission&quot;, Toast.LENGTH_SHORT).show();
                }
                break;
            default:
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过上面的代码, 点击按钮后, 会弹出权限申请的窗口, 如果拒绝, 那么下次再点就仍会弹出询问窗口. 如果接受, 则永久接受, 除非到设置里进行拒绝.&lt;/p&gt;

&lt;h2 id=&quot;内容提供器-1&quot;&gt;内容提供器&lt;/h2&gt;

&lt;h3 id=&quot;uri&quot;&gt;URI&lt;/h3&gt;

&lt;p&gt;URI , 给内容提供器的数据建立了唯一的标识符. 分为两部分, authority和path, 标准写法就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content://authority+path&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content://com.example.app.provider/table1&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;Uri uri = Uri.parse(&quot;content://com.example.app.provider/table1&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;查询&quot;&gt;查询&lt;/h4&gt;

&lt;p&gt;getContentResolver() 就是访问内容提供器的方法,&lt;/p&gt;

&lt;p&gt;而查询方法如下, 使用 getContentResolver().query()方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;Cursor cursor = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, null, null, null);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此方法接受五个参数, 第一个是 URI , 第二个是查询的列名, 第三个是约束条件, 第四个是约束条件中的占位符的具体值, 第五个是查询结果的排序方式.&lt;/p&gt;

&lt;p&gt;最后用完cursor记得关闭( &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cursor.close()&lt;/code&gt; )&lt;/p&gt;

&lt;h2 id=&quot;arrayadapter&quot;&gt;ArrayAdapter&lt;/h2&gt;

&lt;p&gt;ArrayAdapter是数组适配器, 这个地方目前还是不太清楚. 搜到的&lt;a href=&quot;https://www.cnblogs.com/pomodoro/p/11361901.html&quot;&gt;资料&lt;/a&gt;说是为了MVC结构而引入的, 让数据和视图分离. 适配器负责存取数据, 然后和View绑定, 数据变化不会影响视图.&lt;/p&gt;

&lt;h2 id=&quot;检索联系人&quot;&gt;检索联系人&lt;/h2&gt;

&lt;p&gt;这个和上面的拨号权限思路相仿. 先判断有没有权限, 有就直接读取, 没有就尝试申请.&lt;/p&gt;

&lt;h3 id=&quot;读取界面&quot;&gt;读取界面&lt;/h3&gt;

&lt;p&gt;首先先在模拟器中新建两个联系人.
在xml中新增一个 ListView&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ListView&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/contacts_view&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;读取联系人&quot;&gt;读取联系人&lt;/h3&gt;

&lt;p&gt;在活动中增加如下代码, 这就是获取权限之后要执行的代码段.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;// 成员变量,分别是适配器和联系人数组,详情去看MVC架构
// 此处的适配器充当控制器的一部分,用以连接视图和数据
// 将constactsList的数据和视图上的ListView同步更改
ArrayAdapter&amp;lt;String&amp;gt; adapter;
List&amp;lt;String&amp;gt; contactsList = new ArrayList&amp;lt;&amp;gt;();
private void readContects() {
    Cursor cursor = null;
    try {
        // 使用内容提供器的查询功能
        // 此处的URI不用自己解析了,安卓已经内置好了,直接调用就可.
        cursor = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, null, null, null);
        if (cursor != null) {
            // 循环遍历查询到的所有元组
            while (cursor.moveToNext()) {
                // 看似复杂,实际上就是查询列的名字,这个名字也是安卓封装好的常量
                String displayName = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
                String number = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
                // 这个是类中的成员变量
                contactsList.add(displayName + &quot;\n&quot; + number);
            }
            adapter.notifyDataSetChanged();
        }
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (cursor != null) {
            cursor.close();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;申请权限&quot;&gt;申请权限&lt;/h3&gt;

&lt;p&gt;然后申请权限, 这个和之前基本一样, 此处将返回码设置为2, 以作区分.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;void testReadContacts() {
    ListView contactsView = (ListView) findViewById(R.id.contacts_view);
    // 下行这个 simple_list_item_1 是自带的
    adapter = new ArrayAdapter&amp;lt;String&amp;gt;(this, android.R.layout.simple_list_item_1, contactsList);
    contactsView.setAdapter(adapter);
    if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED) {
        ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_CONTACTS}, 2);
    } else {
        readContects();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在之前的申请权限的回调函数里面继续添加此次回调的逻辑, 如果申请成功, 就读取联系人.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;@Override
public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
    switch (requestCode) {
        case 1:
            if (grantResults.length &amp;gt; 0 &amp;amp;&amp;amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // 刚才的权限申请成功,可以打了
                call();
            } else {
                Toast.makeText(this, &quot;You deied the permission&quot;, Toast.LENGTH_SHORT).show();
            }
            break;
        case 2:
            if (grantResults.length &amp;gt; 0 &amp;amp;&amp;amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // 刚才的权限申请成功,可以读取了
                readContects();
            } else {
                Toast.makeText(this, &quot;You deied the permission&quot;, Toast.LENGTH_SHORT).show();
            }
            break;
        default:
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sun, 17 Jan 2021 00:00:00 +0800</pubDate>
        <link>https://dawn-k.github.io/android/2021/01/17/%E5%86%85%E5%AE%B9%E6%8F%90%E4%BE%9B%E5%99%A8/</link>
        <guid isPermaLink="true">https://dawn-k.github.io/android/2021/01/17/%E5%86%85%E5%AE%B9%E6%8F%90%E4%BE%9B%E5%99%A8/</guid>
        
        <category>android</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>「Java」 基础语法</title>
        <description>&lt;h1 id=&quot;基础语法&quot;&gt;基础语法&lt;/h1&gt;

&lt;h2 id=&quot;关键字&quot;&gt;关键字&lt;/h2&gt;

&lt;h3 id=&quot;final&quot;&gt;final&lt;/h3&gt;

&lt;p&gt;final 类似cpp中的const, 表示常量.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;final修饰类, 表示此类不可被继承&lt;/li&gt;
  &lt;li&gt;final修饰方法, 表示此方法在重载中不可被覆盖(覆盖和重写有什么区别), 且不能修饰构造函数.&lt;/li&gt;
  &lt;li&gt;final修饰成员或者局部变量, 表示此成员是常量, 只能在声明时赋值, 一旦赋值就不可修改.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;static&quot;&gt;static&lt;/h3&gt;

&lt;p&gt;static 表示静态, 相当于 cpp中的全局变量, 其声明的成员和函数不依附于某个对象, 而是为整个类所共享.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;static修饰方法, 则此方法中不可使用this, 因为static方法不需要对象调用, 所以也谈不上this, 同理也不可以使用super(this指向本类对象(即调用这个方法的对象), super指向父类对象)&lt;/li&gt;
  &lt;li&gt;static 修饰的方法只能调用本类中的静态成员函数和静态成员变量.&lt;/li&gt;
  &lt;li&gt;static 不可用于修饰局部变量, 事实上, 仅final能够修饰局部变量, 其余的如访问限制, 静态等都无法修饰局部变量.&lt;/li&gt;
  &lt;li&gt;static 不可用于修饰函数参数, 构造函数&lt;/li&gt;
  &lt;li&gt;static 还可以修饰语句块 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt; , 此语句块会在jvm加载类时执行, 并且只执行一次&lt;/li&gt;
  &lt;li&gt;main函数作为整个程序的入口, 自然会在类创建前执行, 所以main函数必须是 public static的, 且传入参数必须是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String[] args&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;综上, final static 结合起来就可以声明全局常量, 也就是类似cpp的全局const变量.&lt;/p&gt;

&lt;h3 id=&quot;this&quot;&gt;this&lt;/h3&gt;

&lt;p&gt;this 是一个引用当前对象的引用变量.&lt;/p&gt;

&lt;h4 id=&quot;引用本类的成员变量和成员函数&quot;&gt;引用本类的成员变量和成员函数&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;public class Student {
    int rollno;
    String name;
    float fee;

    Student() {
        System.out.println(&quot;default constructor&quot;);
    }

    // 如果不用this,则此处的形参名无法赋值给成员变量
    Student(int rollno, String name, float fee) {
        // 此处如果想重用Student的默认构造函数的话需要 this(),如果写就一定要在第一行,否则编译错误
        this();
        this.rollno = rollno;
        this.name = name;
        this.fee = fee;
    }

    void f2() {
        System.out.println(&quot;hello&quot;);
    }

    void f1() {
        // 实际上这里 用 this.f2() 和 f2()效果是一样的
        f2();
    }

    public static void main(String[] args) {
        new Student(1, &quot;1&quot;, 1).f1();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;调用构造函数&quot;&gt;调用构造函数&lt;/h4&gt;

&lt;p&gt;在其他构造函数中, 可以写入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this();&lt;/code&gt; 此处是为了复用无参构造函数, 也可以不用, 但是如果用必须写在第一行, 可参考上文的代码.&lt;/p&gt;

&lt;h4 id=&quot;返回当前类的实例&quot;&gt;返回当前类的实例&lt;/h4&gt;

&lt;p&gt;就是返回调用这个方法的对象的引用.&lt;/p&gt;

&lt;h4 id=&quot;在构造函数中作为参数传递&quot;&gt;在构造函数中作为参数传递&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;class B {
    A4 obj;

    B(A4 obj) {
        this.obj = obj;
    }

    void display() {
        System.out.println(obj.data);// using data member of A4 class
    }
}

class A4 {
    int data = 10;

    A4() {
        B b = new B(this);
        b.display();
    }

    public static void main(String args[]) {
        A4 a = new A4();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可看到A4与B之间互相引用(类似于指针的关系), 创建A的时候创建B, 然后把A的引用传入来初始化B里面指向A的引用&lt;/p&gt;

&lt;h3 id=&quot;super&quot;&gt;super&lt;/h3&gt;

&lt;p&gt;任何class的构造方法, 第一行语句必须是调用父类的构造方法. 如果没有明确地调用父类的构造方法, 编译器会帮我们自动加一句super();&lt;/p&gt;

&lt;p&gt;而且super()和this()不能在一个构造函数中显式的共存, 因为他俩都需要作为构造函数的第一个语句.&lt;/p&gt;

&lt;p&gt;如果父类没有默认的构造方法, 子类就必须显式调用super()并给出参数以便让编译器定位到父类的一个合适的构造方法.&lt;/p&gt;

&lt;h2 id=&quot;异常&quot;&gt;异常&lt;/h2&gt;

&lt;p&gt;如果出现形如下面的报错&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Attempt to invoke virtual method &lt;span class=&quot;s1&quot;&gt;'void android.widget.ImageView.setImageBitmap(android.graphics.Bitmap)'&lt;/span&gt; on a null object reference
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其实是表示调用这个方法的对象是null&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Jan 2021 00:00:00 +0800</pubDate>
        <link>https://dawn-k.github.io/java/2021/01/16/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
        <guid isPermaLink="true">https://dawn-k.github.io/java/2021/01/16/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
        
        <category>Java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>「android」 概览</title>
        <description>&lt;p&gt;[toc]
@import “./环境配置.md” 
@import “./新建活动.md” 
@import “./内容提供器.md” 
@import “./多媒体.md”&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jan 2021 00:00:00 +0800</pubDate>
        <link>https://dawn-k.github.io/android/2021/01/05/%E6%A6%82%E8%A7%88/</link>
        <guid isPermaLink="true">https://dawn-k.github.io/android/2021/01/05/%E6%A6%82%E8%A7%88/</guid>
        
        <category>android</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>「android」 环境配置</title>
        <description>&lt;h1 id=&quot;环境配置&quot;&gt;环境配置&lt;/h1&gt;

&lt;p&gt;[toc]&lt;/p&gt;

&lt;h2 id=&quot;jdk&quot;&gt;JDK&lt;/h2&gt;

&lt;p&gt;先安装好1.8及以上的jdk.&lt;/p&gt;

&lt;h2 id=&quot;关闭hyper-v&quot;&gt;关闭hyper-V&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;bcdedit /set hypervisorlaunchtype off
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;android-studio-安装&quot;&gt;Android Studio 安装&lt;/h2&gt;

&lt;p&gt;可通过  jetbrain tools 一键安装. 安装时选择custom, 然后选择存放sdk的位置, 以及已有的jdk的位置, 然后预先安装的包全部勾选. 进行安装.&lt;/p&gt;

&lt;h2 id=&quot;hello-world&quot;&gt;Hello World&lt;/h2&gt;

&lt;h3 id=&quot;加速下载-gradle&quot;&gt;加速下载 gradle&lt;/h3&gt;

&lt;p&gt;在建立第一个工程后, gradle会进入漫长的下载, 可发现其在下载 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gradle-6.1.1-all.zip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/star_of_science/article/details/107721891&quot;&gt;加速下载gradle&lt;/a&gt;
一定要注意此处的gradle不能通过换 build.gradle的源来解决, 因为这本身就是下载gradle. 所以正确解决思路是手动下一个&lt;a href=&quot;https://downloads.gradle-dn.com/distributions/gradle-6.1.1-all.zip&quot;&gt;gradle&lt;/a&gt;, 然后放到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~\.gradle\wrapper\dists\gradle-6.1.1-all\cfmwm155h49vnt3hynmlrsdst\&lt;/code&gt; , 然后删掉此路径下其他文件即可.&lt;/p&gt;

&lt;h3 id=&quot;gradle-换源&quot;&gt;gradle 换源&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41080414/article/details/105976179&quot;&gt;gradle换源&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;对于单个项目, 将项目根目录下的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; 文件&lt;strong&gt;部分&lt;/strong&gt;替换为如下内容(主要是替换掉 google和jcenter)
也可以在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.gradle/&lt;/code&gt; 下新建 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init.gradle&lt;/code&gt; , 将如下内容填入 然后就能一劳永逸了.&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://maven.aliyun.com/repository/public'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://maven.aliyun.com/repositories/jcenter'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://maven.aliyun.com/repositories/google'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://maven.aliyun.com/repository/central'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;allprojects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://maven.aliyun.com/repository/public'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://maven.aliyun.com/repositories/jcenter'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://maven.aliyun.com/repositories/google'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://maven.aliyun.com/repository/central'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://jitpack.io&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;在手机上运行&quot;&gt;在手机上运行&lt;/h2&gt;

&lt;p&gt;搜了很多资料发现都需要特别麻烦地安装驱动, 实际上现在的驱动安装都很智能,大部分都是自动化的.
首先, 手机打开开发者模式, 并且允许 USB 调试, 允许远程安装应用. 然后, 用数据线连到电脑上, 弹出框里面分别选择允许调试和传输文件(不同手机可能有差异)
此时发现, Android Studio 运行按钮旁边的机型选择里面就会出现自己的手机了. 点击运行就可以把应用装到手机上.(这时候手机还会提示是否安装, 点击确定即可)&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Jan 2021 00:00:00 +0800</pubDate>
        <link>https://dawn-k.github.io/android/2021/01/04/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
        <guid isPermaLink="true">https://dawn-k.github.io/android/2021/01/04/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
        
        <category>android</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>「android」 新建活动</title>
        <description>&lt;h1 id=&quot;新建活动&quot;&gt;新建活动&lt;/h1&gt;

&lt;p&gt;[toc]&lt;/p&gt;

&lt;h2 id=&quot;初始化&quot;&gt;初始化&lt;/h2&gt;

&lt;p&gt;新建一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActivetyTest&lt;/code&gt; 选择 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no activity&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.example.activitytest&lt;/code&gt; 中新建一个空的活动, 不要勾选 generate Layout File 和 launcher Activity&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/src/main/res/&lt;/code&gt; 下新建 layout 文件夹, 在次文件夹下, 新建 layout resource file , 命名为 first_layout, 根元素默认选择为LinearLayout .&lt;/p&gt;

&lt;h2 id=&quot;绘制布局一个按钮&quot;&gt;绘制布局一个按钮&lt;/h2&gt;

&lt;p&gt;打开刚才新建的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_layout.xml&lt;/code&gt; 文件, 切换到text视图. 然后修改如下&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:orientation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vertical&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/button_1&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Button 1&quot;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过design视图可以看到, 这样就创建了一个新的按钮, 它位于屏幕顶端, 与屏幕一样宽, 高度取决于其内容. 其内容为”Button 1” , id的设置是指新定义了它的id.&lt;/p&gt;

&lt;h2 id=&quot;加载布局&quot;&gt;加载布局&lt;/h2&gt;

&lt;p&gt;打开 FirstActivity.java&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;public class FirstActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
//    项目中添加任何资源都会在R文件中生成一个相应的资源id
//    R.layout.first_layout 可获取到first_layout.xml 的布局id
//    添加下面这一行,将这个布局加载到活动中,传入的参数是布局的id
        setContentView(R.layout.first_layout);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;在-androidmanifest-中注册&quot;&gt;在 AndroidManifest 中注册&lt;/h2&gt;

&lt;p&gt;实际上 Android Studio 已经给注册完了. 也就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;actvity&amp;gt;&lt;/code&gt; 标签&lt;/p&gt;

&lt;p&gt;但是我们还要将其设置为主活动. 也就是运行程序时首先启动的活动.&lt;/p&gt;

&lt;p&gt;其实程序没有主活动也可以, 这样它就无法被主动启动, 只能作为第三方服务在其他应用内部调用.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.activitytest&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;application&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:allowBackup=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:icon=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@mipmap/ic_launcher&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@string/app_name&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:roundIcon=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@mipmap/ic_launcher_round&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:supportsRtl=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:theme=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@style/AppTheme&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.FirstActivity&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is FirstActivity&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.intent.action.MAIN&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;category&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.intent.category.LAUNCHER&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;文件编写时一定一定要仔细, 尤其是activity标签内还有添加东西.&lt;/p&gt;

&lt;h2 id=&quot;运行程序&quot;&gt;运行程序&lt;/h2&gt;

&lt;p&gt;运行成功之后, 会发现程序的左上角是 android:lable 的内容, 并且是启动器(可以理解为桌面)中应用程序显示的名称, 但是如果点开应用的信息的话会发现它是工程的名字.&lt;/p&gt;

&lt;h2 id=&quot;toast&quot;&gt;Toast&lt;/h2&gt;

&lt;p&gt;Toast 就是安卓在下方的通知, 停留一段时间自动消失
在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FirstActivity.java&lt;/code&gt; 下添加监听器.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;/* 设置按钮的点击事件 */
// findViewById 可以找到布局文件中定义的元素,传入xml中定义的id,返回view对象
Button button1 = (Button) findViewById(R.id.button_1);
// 注册监听器, 点击按钮时会执行onClick方法
button1.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
        // 通过静态方法创建toast对象,然后使用show,显示这个提示
        // 第一个参数Context 上下文,此处传入活动, 第二个参数文本内容,第三个是时长,自带了short和long
        Toast.makeText(FirstActivity.this, &quot;You clicked Button 1&quot;, Toast.LENGTH_SHORT).show();
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;menu&quot;&gt;Menu&lt;/h2&gt;

&lt;h3 id=&quot;创建资源文件&quot;&gt;创建资源文件&lt;/h3&gt;

&lt;p&gt;创建 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res/menu&lt;/code&gt; 文件夹, 创建 Menu Resource File 文件, 取名为main. 就得到了main.xml&lt;/p&gt;

&lt;p&gt;修改此文件如下:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;menu&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!--    item 用以创建菜单项, id是标识符  title是显示名称--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/add_item&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Add&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/remove_item&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Remove&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/menu&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时候可以从design视图看到右上角多了菜单, 包含刚才创建的两项&lt;/p&gt;

&lt;h3 id=&quot;重载菜单显示&quot;&gt;重载菜单显示&lt;/h3&gt;

&lt;p&gt;在 FirstActivity.java 类中重载菜单显示函数&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;按ctrl+O可以快速重载&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // 给当前活动创建菜单
        // 第一个参数是指定创建菜单的资源文件也就是刚才创建的res/menu/main.xml
        // 第二个参数是将菜单添加到哪个对象中,这个是传入的参数
        getMenuInflater().inflate(R.menu.main, menu);
        // 允许菜单显示,返回true
        return true;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;重载菜单选择&quot;&gt;重载菜单选择&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        // 通过传入的item的id号,执行不同的动作
        switch (item.getItemId()) {
            case R.id.add_item:
                Toast.makeText(this, &quot;You clicked Add&quot;, Toast.LENGTH_SHORT).show();
                break;
            case R.id.remove_item:
                Toast.makeText(this, &quot;You clicked Remove&quot;, Toast.LENGTH_SHORT).show();
                break;
            default:
        }
        return true;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;运行效果&quot;&gt;运行效果&lt;/h3&gt;

&lt;p&gt;运行虚拟机, 发现右上角有三个点, 然后点击之后弹出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add&lt;/code&gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Remove&lt;/code&gt; 框, 点击之后有文字提示. 与onOptionsItemSelected中的一致.&lt;/p&gt;

&lt;h2 id=&quot;intent&quot;&gt;Intent&lt;/h2&gt;

&lt;p&gt;intent 是一种能够切换活动的方法.&lt;/p&gt;

&lt;h3 id=&quot;显式intent&quot;&gt;显式Intent&lt;/h3&gt;

&lt;p&gt;修改 FirstActivity.java 中的 onCreate() 中的按钮监听器, 添加如下内容.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;// 显式Intent
Intent intent = new Intent(FirstActivity.this, SecondActivity.class);
startActivity(intent);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;隐式intent&quot;&gt;隐式intent&lt;/h3&gt;

&lt;p&gt;创建 ` SecondActivity.java&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; , 活动选择为 &lt;/code&gt;Empty Activity&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; , 配置文件为 &lt;/code&gt;second_layout.xml` . 在 AndroidManifest.xml 下将其对应的部分修改如下.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.SecondActivity&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 指定当前活动能够响应的action和category --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- action只能有一个,category可以有多个,当且仅当action和所有category都对上的时候,才能判定为可响应 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 若一个Intent没有任何可响应它的活动.则会导致程序崩溃 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 只有action和category中的内容能够同时匹配上Intent中指定的时,这个活动才能响应这个Intent --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.activitytest.ACTION_START&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;category&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.intent.category.DEFAULT&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;category&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.activitytest.MY_CATEGORY&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 FirstActivity.java的监听器中加入如下内容(记得将刚才测试显式intent的代码注释掉)&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// 若想要启动的活动的catalog是DEFAULT的话,则无需指定intent的catalog,startActivity会自动给他加上&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 隐式Intent ,通过action 和 catelog 才决定启动哪个活动,可广泛用于调用其他程序的活动&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.activitytest.ACTION_START&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.activitytest.MY_CATEGORY&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;更多用法&quot;&gt;更多用法&lt;/h3&gt;

&lt;h4 id=&quot;调用浏览器&quot;&gt;调用浏览器&lt;/h4&gt;

&lt;p&gt;修改 FirstActivity.java 的监听器如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;Intent intent = new Intent(Intent.ACTION_VIEW);
intent.setData(Uri.parse(&quot;http://www.baidu.com&quot;));
// 不加下面这行无法调用ThirdActivity
intent.addCategory(&quot;android.intent.category.BROWSABLE&quot;);
startActivity(intent);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时启动AVD, 会发现点击按钮之后, 浏览器(chrome)会自动被调用.&lt;/p&gt;

&lt;p&gt;其中setData就意味着需要给 intent-filter 增加data标签, 
可以用于指定 scheme(协议) host, port path mineType(数据类型)&lt;/p&gt;

&lt;p&gt;创建 ` ThirdActivity.java&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; , 活动选择为 &lt;/code&gt;Empty Activity&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; , 配置文件为 &lt;/code&gt;third_layout.xml` . 在 AndroidManifest.xml 下将其对应的部分修改如下.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.ThirdActivity&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 添加完下面的intent-filter 之后,就可在手机的浏览器默认应用选择里发现 ActivityTest 这个软件,选中之后,待会运行就是--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.intent.action.VIEW&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;category&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.intent.category.DEFAULT&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 此处与书上不一致,必须增加这行才可编译通过 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;category&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.intent.category.BROWSABLE&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:scheme=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;拨号&quot;&gt;拨号&lt;/h4&gt;

&lt;p&gt;修改监听器如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;Intent intent = new Intent(Intent.ACTION_DIAL);
intent.setData(Uri.parse(&quot;tel:10086&quot;));
startActivity(intent);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动AVD, 点击按钮就可以调出拨号界面.&lt;/p&gt;

&lt;h4 id=&quot;通过intent向其他活动传递消息&quot;&gt;通过Intent向其他活动传递消息&lt;/h4&gt;

&lt;h5 id=&quot;单向传递&quot;&gt;单向传递&lt;/h5&gt;

&lt;p&gt;修改FirstActivity 里面的监听器如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;// 向second传递消息
String data = &quot;Hello SecondActivity&quot;;
Intent intent = new Intent(FirstActivity.this, SecondActivity.class);
// 第一个参数是tag,第二个元素是携带的信息,这两个可以理解为键值对,待会取信息的时候也要用键取值
intent.putExtra(&quot;extra_data&quot;, data);

startActivity(intent);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 SecondActivity 的 onCreate 里面加入如下内容便可读取.
也就是可将intent看做类似字典的逻辑结构.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;// 接受来自FirstActivity的消息
Intent intent = getIntent();
String data = intent.getStringExtra(&quot;extra_data&quot;);
Log.d(&quot;SecondActivity&quot;, data);
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;双向发送消息&quot;&gt;双向发送消息&lt;/h5&gt;

&lt;p&gt;修改 FirstActivity 的监听器, 去掉 startActivity , 修改为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;startActivityForResult(intent, 1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此处的1就是给这个intent的一标记, 用于有多个活动回调 FirstActivity时进行辨别.&lt;/p&gt;

&lt;p&gt;修改 SecondActivity 的监听器如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;// 构造返回信息的内容
Intent intent = new Intent();
intent.putExtra(&quot;data_return&quot;, &quot;Hello FirstActivity&quot;);
// 此处设置 Result的状态,一般就ok和cancel两种
setResult(RESULT_OK, intent);
finish();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后重载 onBackPress(), 内容和onClick()的相同, 用于在使用返回键返回 FirstActivity 时能够返回同样的结果.&lt;/p&gt;

&lt;p&gt;最后在 FirstActivity 中重载 onActivityResult, 内容如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;@Override
protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
    // 书上没有这个super的调用,但是没有就编译不过
    super.onActivityResult(requestCode, resultCode, data);
    // switch 用来判断此回调是来自哪个活动的,此处的1就是刚才 startActivityForResult里面定义的
    switch (requestCode) {
        case 1:
            if (resultCode == RESULT_OK) {
                String returnedData = data.getStringExtra(&quot;data_return&quot;);
                Log.d(&quot;FirstActivity&quot;, returnedData);
            }
            break;
        default:
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行程序, 就可以发现在 SecondActivity 无论是通过按钮还是返回键返回, 都可以在Logcat中发现打印的信息了.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;但注意在 SecondActivity 的 onBackPress 中不能调用super, 否则后续的不会执行.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;活动生命周期&quot;&gt;活动生命周期&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;运行状态&lt;/th&gt;
      &lt;th&gt;暂停状态&lt;/th&gt;
      &lt;th&gt;停止状态&lt;/th&gt;
      &lt;th&gt;销毁状态&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;在栈顶?&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;可见?&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;未被销毁?&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;√&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;可见可以有部分可见.&lt;/p&gt;

&lt;p&gt;onCreate  活动第一次创建
onStart   第一次创建时, 停止状态-&amp;gt;运行状态
onStop    运行状态-&amp;gt;停止状态, 销毁
onRestart 停止状态-&amp;gt;运行状态
onPause   运行状态-&amp;gt;暂停状态, 运行状态-&amp;gt;停止状态, 销毁
onResume  第一次创建时, 暂停状态-&amp;gt;运行状态, 停止状态-&amp;gt;运行状态
onDestory 销毁&lt;/p&gt;

&lt;p&gt;可见, 
onCreate  和   onDestory 是反义词, 只会在 产生/销毁 时调用一次.
onStart   和   onStop    是反义词, 只会在 产生/销毁 运行/停止 时调用
onResume  和   onPause   是反义词, 只会在 产生/销毁 运行/停止 运行/暂停 时调用
onRestart 相比于 onStart , 不会在创建时调用, 只会在 停止-&amp;gt;运行时调用&lt;/p&gt;

&lt;h2 id=&quot;启动模式&quot;&gt;启动模式&lt;/h2&gt;

&lt;p&gt;重新打开 ActivityTest 项目&lt;/p&gt;

&lt;h3 id=&quot;standard&quot;&gt;standard&lt;/h3&gt;

&lt;p&gt;此模式 只要调用新活动就一定新建, 即使已经存在于栈中.
让 FirstActivity 的按钮调用自身, 同时打印日志. 启动项目, 点击按钮两次, 从日志中发现创建了两个活动. 而且需要三次back才能退出.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;// 尝试去调用自己,用以验证 standard启动模式
Intent intent = new Intent(FirstActivity.this, FirstActivity.class);
startActivity(intent);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;singletop&quot;&gt;singleTop&lt;/h3&gt;

&lt;p&gt;此模式, 在栈顶活动调用自身时不会新建, 但其他情况下仍然会.
比如栈可能 FirstActivity , SecondActivity , FirstActivity 这种情况&lt;/p&gt;

&lt;h3 id=&quot;singletask&quot;&gt;singleTask&lt;/h3&gt;

&lt;p&gt;singleTask 会在启动新活动时先检查栈中有无活动, 如果有, 就找到它, &lt;strong&gt;并且弹出它上方所有活动&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;此情况可通过 FirstActivity重写 onRestart , SecondActivity重写 onDestory 来验证.&lt;/p&gt;

&lt;h3 id=&quot;singleinstance&quot;&gt;singleInstance&lt;/h3&gt;

&lt;p&gt;若某个活动的启动模式被设置为 singleInstance, 那么, 它在被调用时, 会另开一个栈.&lt;/p&gt;

&lt;p&gt;我们令 SecondActivity 为此模式. 然后让 FirstActivity 调用 SecondActivity , SecondActivity 调用 ThirdActivity.&lt;/p&gt;

&lt;p&gt;在各自的 onCreate 中调用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;// 以FirstActivity举例
Log.d(&quot;FirstActivity&quot;, &quot;Task id is &quot; + getTaskId());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行程序, 可发现 FirstActivity 与 ThirdActivity 处于同一个栈中, SecondActivity单独位于一个栈.
且返回的顺序是 ThirdActivity -&amp;gt; FirstActivity -&amp;gt; SecondActivity.
这是因为返回的顺序是先将当前栈一个一个弹空, 再切换到别的栈再弹出.&lt;/p&gt;

&lt;h2 id=&quot;最佳实践&quot;&gt;最佳实践&lt;/h2&gt;

&lt;h3 id=&quot;查看当前的活动&quot;&gt;查看当前的活动&lt;/h3&gt;

&lt;p&gt;直接创建java类 BaseActivity(不要用创建活动的方式, 直接创建类即可).&lt;/p&gt;

&lt;p&gt;使其继承 AppCompatActivity, 然后令之前的三个活动全部放弃原有的继承, 转而继承 BaseActivity.&lt;/p&gt;

&lt;p&gt;重写 BaseActivity的onCreate, 写入如下语句&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;Log.d(&quot;BaseActivity&quot;, getClass().getSimpleName());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后启动程序, 观察日志输出&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;BaseActivity: FirstActivity
BaseActivity: SecondActivity
BaseActivity: ThirdActivity
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就可以实时看到当前是哪个活动了.&lt;/p&gt;

&lt;h3 id=&quot;启动活动的最佳方法&quot;&gt;启动活动的最佳方法&lt;/h3&gt;

&lt;p&gt;其实就是多加一个  actionStart() 函数
以修改 SecondActivity 的启动为例, 加入如下代码.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;    /*
     * 调用方法
     * 比如在FirstActivity中想要启动 SecondActivity
     * 则使用如下语句
     * SecondActivity.actionStart(FirstActivity.this,&quot;data1&quot;,&quot;data2&quot;);
     * */
    public static void actionStart(Context context, String data1, String data2) {
        Intent intent = new Intent(context, SecondActivity.class);
        intent.putExtra(&quot;param1&quot;, data1);
        intent.putExtra(&quot;param2&quot;, data2);
        context.startActivity(intent);
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;按钮的点击事件&quot;&gt;按钮的点击事件&lt;/h3&gt;

&lt;p&gt;除了之前提到过的按钮加监听器的方式之外，还有另一种方式.&lt;/p&gt;

&lt;p&gt;将活动类设置为实现View. OnClickListener 接口. 然后在onCreate中将此按钮加入this监听器.
然后重载 onClick方法, 在方法中用switch来指定每个按钮被点击后的行为.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;public class DicomViewer extends Activity implements View.OnClickListener {

    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        // 给按钮加入监听器,监听器是类本身
        Button button_next = (Button) findViewById(R.id.button_next);
        button_next.setOnClickListener(this);
    }

    // 指定各个按钮被点击后的行为
    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.button_next:
                Log.d(&quot;button_next&quot;, &quot;button_next clicked&quot;);
                next(v);
                break;
            default:
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Mon, 04 Jan 2021 00:00:00 +0800</pubDate>
        <link>https://dawn-k.github.io/android/2021/01/04/%E6%96%B0%E5%BB%BA%E6%B4%BB%E5%8A%A8/</link>
        <guid isPermaLink="true">https://dawn-k.github.io/android/2021/01/04/%E6%96%B0%E5%BB%BA%E6%B4%BB%E5%8A%A8/</guid>
        
        <category>android</category>
        
        
        <category>android</category>
        
      </item>
    
  </channel>
</rss>
