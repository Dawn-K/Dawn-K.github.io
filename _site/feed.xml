<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DawnK's Blog</title>
    <description>Keep busy living or kepp busy dying</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 29 Jun 2019 12:23:23 +0800</pubDate>
    <lastBuildDate>Sat, 29 Jun 2019 12:23:23 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Python</title>
        <description>&lt;h1 id=&quot;python&quot;&gt;Python&lt;/h1&gt;

&lt;h2 id=&quot;再次邂逅&quot;&gt;再次邂逅&lt;/h2&gt;

&lt;p&gt;和博客系统一样,Python也不是第一次学习了,之前读过&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/1016959663602400&quot;&gt;廖雪峰的Python3教程&lt;/a&gt;,&lt;a href=&quot;https://www.runoob.com/python3/python3-tutorial.html&quot;&gt;菜鸟教程的Python3&lt;/a&gt; ,也写过一个图床脚本(虽然非常简陋).但是一直没有静下心来好好整理.前几天看到了&lt;a href=&quot;https://github.com/jackfrued/Python-100-Days&quot;&gt;Python-100days&lt;/a&gt; ,这个开源教程与其说是教程,不如说是&lt;strong&gt;提纲&lt;/strong&gt;(而且后四分之一的内容还没有更新 by 2019.6.27) ,总之不管怎样先让自己做起来吧,从简单的开始,发掘自己喜欢的方向.由于有一些基础,所以在前面的部分我会尽量减少篇幅.&lt;/p&gt;

&lt;p&gt;本文档中的开发环境&lt;code class=&quot;highlighter-rouge&quot;&gt;manjaro Linux  ananconda  Python3.7.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;参考资料: &lt;a href=&quot;https://docs.python.org/zh-cn/3/tutorial/index.html&quot;&gt;Python3官方文档&lt;/a&gt;, &lt;a href=&quot;https://www.liaoxuefeng.com/wiki/1016959663602400&quot;&gt;廖雪峰的Python3教程&lt;/a&gt; , &lt;a href=&quot;https://www.runoob.com/python3/python3-tutorial.html&quot;&gt;菜鸟教程-Python3&lt;/a&gt; ,&lt;笨方法学Python3&gt;&lt;/笨方法学Python3&gt;&lt;/p&gt;

&lt;h2 id=&quot;pyhton简介&quot;&gt;Pyhton简介&lt;/h2&gt;

&lt;h3 id=&quot;版本号变迁&quot;&gt;版本号变迁&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;1989年圣诞节：Guido von Rossum开始写Python语言的编译器。&lt;/li&gt;
  &lt;li&gt;1994年1月：Python 1.0正式发布。&lt;/li&gt;
  &lt;li&gt;2000年10月16日：Python 2.0发布&lt;/li&gt;
  &lt;li&gt;2008年12月3日：Python 3.0发布&lt;/li&gt;
  &lt;li&gt;Python 3.7的版本在2018年发布.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Python的版本号分为三段，形如A.B.C。其中A表示大版本号，一般当&lt;strong&gt;整体重写，或出现不向后兼容的改变&lt;/strong&gt;时，增加A；B表示&lt;strong&gt;功能更新&lt;/strong&gt;，出现新功能时增加B；C表示&lt;strong&gt;小的改动&lt;/strong&gt;(如修复了某个Bug)，只要有修改就增加C。&lt;/p&gt;

&lt;h3 id=&quot;python应用领域&quot;&gt;Python应用领域&lt;/h3&gt;

&lt;p&gt;目前Python在Web应用开发、云基础设施、DevOps、网络爬虫开发、数据分析挖掘、机器学习等领域都有着广泛的应用，因此也产生了&lt;strong&gt;Web后端开发、数据接口开发、自动化运维、自动化测试、科学计算和可视化、数据分析、量化交易、机器人开发、图像识别和处理&lt;/strong&gt;等一系列的职位。&lt;/p&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;

&lt;p&gt;此处不再详细说明,win和Linux都推荐&lt;a href=&quot;https://baike.baidu.com/item/anaconda/20407441?fr=aladdin&quot;&gt;anaconda&lt;/a&gt;,此包可以控制Python的版本(即可以虚拟出Python环境&lt;strong&gt;,尤其是对于Arch系的滚动更新&lt;/strong&gt;方式来说(生产环境改变会很麻烦的,Python包对于版本的要求还是蛮严格的))&lt;/p&gt;

&lt;h2 id=&quot;开始之前&quot;&gt;开始之前&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Python不需要句末分号&lt;/li&gt;
  &lt;li&gt;Python代码块是靠”:”和缩进体现的,没有C中的{ .. }这种结构&lt;/li&gt;
  &lt;li&gt;Python是弱类型语言,不需要声明类型(有点不习惯)&lt;/li&gt;
  &lt;li&gt;Python不存在”编译”,只有”解释”&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;缩进&quot;&gt;缩进&lt;/h3&gt;

&lt;p&gt;Python并没有强制规定缩进的长度,但是约定俗成是4个空格(强烈推荐将tab自动转为4空格),需要保证全文中使用的缩进单位是相同的(要么是空格,要么是tab,不能混用).在同一代码块中,缩进的长度应该保持一致.&lt;/p&gt;

&lt;h3 id=&quot;注释&quot;&gt;注释&lt;/h3&gt;

&lt;p&gt;Python使用&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; 作为单行注释,根据规范,&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; 应该是距离代码行的末端最后一个字符两个空格,且注释的第一个字符应该距离&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;有两个空格(强迫症福音),但实际上这些东西都可以用IDE的代码格式化一键修改,无须太过刻意&lt;/p&gt;

&lt;h3 id=&quot;运行&quot;&gt;运行&lt;/h3&gt;

&lt;p&gt;Python代码运行有两种方式(推荐使用Pycharm).一种是交互式运行,在命令行中启动Python,然后逐句输入,当场翻译.另一种是提前写好整个程序,然后&lt;code class=&quot;highlighter-rouge&quot;&gt;python xxx.py&lt;/code&gt; 直接运行.(但是我发现在IDE中点”运行”,和手动用命令行执行.py是不完全一样的,具体表现在&lt;strong&gt;getpass()函数中&lt;/strong&gt;,之后慢慢摸索)&lt;/p&gt;

&lt;h3 id=&quot;结构&quot;&gt;结构&lt;/h3&gt;

&lt;p&gt;Python没有”主函数”这一个概念(但是有函数),Python认为只要不是在任何函数内部,那么在执行此文件时,就可以直接运行.所以非常简单的脚本,是可以一上来直接就写的,&lt;strong&gt;最基本的输入输入函数可以直接调用,无须任何头文件&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;变量类型&quot;&gt;变量类型&lt;/h2&gt;

&lt;p&gt;作为弱类型语言,Python其实也拥有变量类型这一概念,不过大多是程序自己推导的.&lt;/p&gt;

&lt;h3 id=&quot;数字&quot;&gt;数字&lt;/h3&gt;

&lt;h4 id=&quot;整型&quot;&gt;整型&lt;/h4&gt;

&lt;p&gt;整型：Python中可以处理&lt;strong&gt;任意大小的整数&lt;/strong&gt;(在Python3中只有int这一类型用来处理整数)而且支持二进制(如&lt;code class=&quot;highlighter-rouge&quot;&gt;0b100&lt;/code&gt;，换算成十进制&lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;)、八进制(如&lt;code class=&quot;highlighter-rouge&quot;&gt;0o100&lt;/code&gt;，换算成十进制是&lt;code class=&quot;highlighter-rouge&quot;&gt;64&lt;/code&gt;)、十进制(&lt;code class=&quot;highlighter-rouge&quot;&gt;100&lt;/code&gt;)和十六进制(&lt;code class=&quot;highlighter-rouge&quot;&gt;0x100&lt;/code&gt;，换算成十进制是&lt;code class=&quot;highlighter-rouge&quot;&gt;256&lt;/code&gt;)的表示法。&lt;/p&gt;

&lt;h4 id=&quot;浮点数&quot;&gt;浮点数&lt;/h4&gt;

&lt;p&gt;Python3中只有&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; 用来存储浮点数.浮点数除了数学写法(如&lt;code class=&quot;highlighter-rouge&quot;&gt;123.456&lt;/code&gt;)之外还支持科学计数法(如&lt;code class=&quot;highlighter-rouge&quot;&gt;1.23456e2&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;实际上还有十进制浮点数&lt;a href=&quot;https://docs.python.org/zh-cn/3/library/decimal.html#decimal.Decimal&quot;&gt;decimal&lt;/a&gt;,这个等用到再搜也不迟&lt;/p&gt;

&lt;h4 id=&quot;布尔型&quot;&gt;布尔型&lt;/h4&gt;

&lt;p&gt;布尔型只有&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; 两种值,&lt;strong&gt;注意大小写&lt;/strong&gt; .在逻辑运算之后就会产生布尔值.比如&lt;code class=&quot;highlighter-rouge&quot;&gt;3&amp;gt;2&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;复数型&quot;&gt;复数型&lt;/h4&gt;

&lt;p&gt;形如&lt;code class=&quot;highlighter-rouge&quot;&gt;3+5j&lt;/code&gt; 此处的&lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;和数学上的&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;是相同的含义  ,当然这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;也可以大写&lt;/p&gt;

&lt;h4 id=&quot;常量&quot;&gt;常量&lt;/h4&gt;

&lt;p&gt;其实Python里面根本没有常量(此处是指类似c里面const的设计),也没有任何机制能够保证一个变量不会被改变.一般情况下,采用全部大写的方式来表示常量.&lt;/p&gt;

&lt;h3 id=&quot;空值&quot;&gt;空值&lt;/h3&gt;

&lt;p&gt;空值用None表示,是一个特殊的空值&lt;/p&gt;

&lt;h3 id=&quot;字符串&quot;&gt;字符串&lt;/h3&gt;

&lt;p&gt;Python不支持单字符(c中的char) ,即使是单个字符也会用字符串来表示&lt;/p&gt;

&lt;p&gt;字符串可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;...&quot;&lt;/code&gt; 和&lt;code class=&quot;highlighter-rouge&quot;&gt;'...'&lt;/code&gt; 这两种方式表示.字符串中的特殊字符也可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;来转义.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在Python3中，所有的字符串都是Unicode字符串&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;原始字符串&quot;&gt;原始字符串&lt;/h4&gt;

&lt;p&gt;在引号前加&lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; ,就可以直接完全如实反映字符串引号中的内容.&lt;/p&gt;

&lt;p&gt;举例:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'C:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ame'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# here \n means newline!
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ame&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'C:\some\name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# note the r before the quote
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;跨行输入&quot;&gt;跨行输入&lt;/h4&gt;

&lt;p&gt;采用三重引号的方式,&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&quot;...&quot;&quot;&quot;&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;'''...'''&lt;/code&gt; 在字符串中间的回车也会如实地被记录(多行字符串也支持前文的原始字符串操作),如果不想包含末尾的回车,可以在对应的行尾加入&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的WYSIWYG（所见即所得）格式的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;举个例子(在.py文件中):&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出(&lt;strong&gt;注意最开头的回车并没有被记录&lt;/strong&gt;):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;举个例子(在交互式界面中)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'''line1
... line2
... line3'''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;line1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;line2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;line3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;赋值&quot;&gt;赋值&lt;/h4&gt;

&lt;p&gt;Python3的字符串是&lt;code class=&quot;highlighter-rouge&quot;&gt;immutable -- 不可变&lt;/code&gt;  类型,也就是说&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;具有固定值的对象。不可变对象包括数字、字符串和元组。这样的对象不能被改变。&lt;strong&gt;如果必须存储一个不同的值，则必须创建新的对象。&lt;/strong&gt;它们在需要常量哈希值的地方起着重要作用，例如作为字典中的键。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;举个例子,&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'xyz'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这种方式是浅拷贝,b和a指向了同一块内存(当然,Python中没有指针的概念)&lt;/p&gt;

&lt;p&gt;我们通过&lt;code class=&quot;highlighter-rouge&quot;&gt;id()&lt;/code&gt;(id函数用来获取对象的内存地址)来验证这个问题&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 每次运行结果未必相同,但是id(a)==id(b)是事实
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;140491303471680&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;140491303471680&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是如果修改了a, b的值却不会发生改变!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'1xyz'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'xyz'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;140491303471792&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;140491303471680&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正如前文所说,&lt;strong&gt;字符串被修改后,不会在原来的基础上修改,而是会立刻创建一份新的,然后将指针指过去&lt;/strong&gt;(这就是Python慢的一个原因是嘛?)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;而且Python无法直接修改字符串的某一位字符(当然,利用切片来直接修改某一段也是不行的&lt;code class=&quot;highlighter-rouge&quot;&gt;word[2:]='C++'&lt;/code&gt;是不被允许的&lt;/strong&gt; ,只能通过一些替换,转化,切片等手段操作重新创建一个字符串(感觉有些不方便啊)&lt;/p&gt;

&lt;h4 id=&quot;拼接&quot;&gt;拼接&lt;/h4&gt;

&lt;p&gt;字符串可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 进行连接（粘到一起），也可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 进行重复:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'un'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ium'&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'unununium'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;相邻的两个或多个 &lt;em&gt;字符串字面值&lt;/em&gt; （引号引起来的字符）将会自动连接到一起.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Py'&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'thon'&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'Python'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是这种操作仅限于字符串字面量,对于字符串变量和字符串表达式均不可.因此拼接的最通用方法还是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;,它均可以进行连接.&lt;/p&gt;

&lt;h4 id=&quot;索引&quot;&gt;索引&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;索引和c里面的相似,都是为了获取单个字符(Python将单个字符也看做字符串)都不能越界&lt;/strong&gt;,不过Python支持负数下标,负数下标从-1开始.&lt;code class=&quot;highlighter-rouge&quot;&gt;word[0]==word[-0]&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Python'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# character in position 0
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'P'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# character in position 5
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'n'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Python allows negative indexing,It is equivalent to word[len-1]
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'n'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;IndexError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;IndexError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;切片&quot;&gt;切片&lt;/h4&gt;

&lt;p&gt;切片功能是用来获取字符串的.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# characters from position 0 (included) to 2 (excluded)
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Py'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# characters from position 2 (included) to 5 (excluded)
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tho'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意切片的开始总是被包括在结果中，而结束不被包括.这使得 &lt;code class=&quot;highlighter-rouge&quot;&gt;s[:i] + s[i:]&lt;/code&gt; 总是等于 &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;切片起始的默认值是第一个字符,结束的默认值是一直切片到字符串的结尾(可以理解为超尾).而且切片会自动修复越界错误(就是到边界就自动停止了)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'python'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'ython'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'yth'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;长度&quot;&gt;长度&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;len()&lt;/code&gt;函数可以返回字符串的长度,类似&lt;code class=&quot;highlighter-rouge&quot;&gt;c++&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt; .&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Python'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 28 Jun 2019 19:13:00 +0800</pubDate>
        <link>http://localhost:4000/2019/06/28/Python/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/06/28/Python/</guid>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title>manjaro折腾小记</title>
        <description>&lt;h1 id=&quot;manjaro折腾小记&quot;&gt;manjaro折腾小记&lt;/h1&gt;

&lt;p&gt;使用manjaro半年了,中途遇见很多很多问题,在此记录,以备以后查询之用&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/4fce765a306b&quot;&gt;GAWEGOR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_41301508/article/details/81193217&quot;&gt;imorta&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;源设置&quot;&gt;源设置&lt;/h2&gt;

&lt;h3 id=&quot;设置官方镜像源coreextracommunitymultilib&quot;&gt;设置官方镜像源(core,extra,community,multilib)&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman-mirrors &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; China &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; rank //更新镜像排名,图形化界面,选中前几个即可
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-Syy&lt;/span&gt; //更新数据源
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;设置archlinuxcn源&quot;&gt;设置archlinuxcn源&lt;/h3&gt;

&lt;p&gt;修改 /etc/pacman.conf　　=&amp;gt; 末尾添加&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[archlinuxcn]
SigLevel = Optional TrustedOnly
Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;目录设置&quot;&gt;目录设置&lt;/h2&gt;

&lt;h3 id=&quot;修改home下的目录为英文&quot;&gt;修改Home下的目录为英文&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;修改目录映射文件名；&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim .config/user-dirs.dirs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改为以下内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;XDG_DESKTOP_DIR=&quot;$HOME/Desktop&quot;
XDG_DOWNLOAD_DIR=&quot;$HOME/Download&quot;
XDG_TEMPLATES_DIR=&quot;$HOME/Templates&quot;
XDG_PUBLICSHARE_DIR=&quot;$HOME/Public&quot;
XDG_DOCUMENTS_DIR=&quot;$HOME/Documents&quot;
XDG_MUSIC_DIR=&quot;$HOME/Music&quot;
XDG_PICTURES_DIR=&quot;$HOME/Pictures&quot;
XDG_VIDEOS_DIR=&quot;$HOME/Videos&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;将Home目录下的中文目录名改为对应的中文名；&lt;/li&gt;
  &lt;li&gt;重启系统。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;软件操作&quot;&gt;软件操作&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;安装 pacman -S&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;删除 pacman -R&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;移除已安装不需要软件包 pacman -Rs&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;删除一个包,所有依赖 pacman -Rsc&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;升级包 pacman -Syu&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;查询包数据库 pacman -Ss&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;搜索以安装的包 pacman -Qs&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;显示包大量信息 pacman -Si&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;本地安装包 pacman -Qi&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;清理包缓存 pacman -Sc&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;显卡驱动&quot;&gt;显卡驱动&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://mtaoist.xyz/2018/03/19/Bumblebee/&quot;&gt;taoist&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;安装bumblebee&quot;&gt;安装bumblebee&lt;/h3&gt;

&lt;p&gt;Manjaro 提供了强大的硬件检测模块&lt;code class=&quot;highlighter-rouge&quot;&gt;mhwd&lt;/code&gt;,可以很方便的安装各种驱动。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;安装依赖&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;sudo pacman -S virtualgl lib32-virtualgl lib32-primus primus&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装nvidia闭源驱动与intel驱动混合版bumblebee&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;sudo mhwd -f -i pci video-hybrid-intel-nvidia-bumblebee&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;开启自动启动bumblebeed服务&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;sudo systemctl enable bumblebeed&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将用户添加到bumblee组&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;sudo gpasswd -a $USER bumblebee&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果一切顺利的话，&lt;strong&gt;重启后就可以在你想运行的程序名前面加&lt;code class=&quot;highlighter-rouge&quot;&gt;optirun&lt;/code&gt;,好使用独立显卡驱动你的应用程序&lt;/strong&gt;。如果出现启动无法进入图形界面的问题,本笔记中也有解决方法.&lt;/p&gt;

&lt;h3 id=&quot;测试性能&quot;&gt;测试性能&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;安装测试软件&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;sudo pacman -S mesa-demos&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;集显性能&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;glxgears -info&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;独显性能&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;optirun glxgears -info&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以看到独显带来的提升非常巨大,大概是集成显卡帧数30多倍&lt;/p&gt;

&lt;h2 id=&quot;输入法&quot;&gt;输入法&lt;/h2&gt;

&lt;p&gt;我们安装基于fcitx的搜狗输入法&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; fcitx-sogoupinyin
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; fcitx-im         &lt;span class=&quot;c&quot;&gt;# 全部安装&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; fcitx-configtool &lt;span class=&quot;c&quot;&gt;# 图形化配置工具&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;设置中文输入法环境变量，编辑~/.xprofile文件，增加下面几行(如果文件不存在，则新建)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exportGTK_IM_MODULE=fcitx
exportQT_IM_MODULE=fcitx
exportXMODIFIERS=&quot;@im=fcitx&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;保存成功后，在终端输入fcitx启动服务后，会增加一个键盘的托盘图标，右击这个图标，打开配置工具，在输入法栏目中增加sogoupinyin输入法。&lt;/p&gt;

&lt;p&gt;重启后就能正常使用了。&lt;/p&gt;

&lt;p&gt;偶尔输入法崩溃,卸载重装就好了,这个还比较良心.&lt;/p&gt;

&lt;h2 id=&quot;wps&quot;&gt;WPS&lt;/h2&gt;

&lt;p&gt;wps算是比较良心的了,目前是最好的office替代品,&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; wps-office
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; ttf-wps-fonts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是!在显示方面可能会有一些问题,比如在白色底下的字体可能是灰色,导致看不清,所以在使用wps前可以把系统的主题设置成白色的,这样就解决了此问题.&lt;/p&gt;

&lt;h2 id=&quot;开机卡死问题&quot;&gt;开机卡死问题&lt;/h2&gt;

&lt;p&gt;编辑 /etc/default/grub,前几行改成这样&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GRUB_DEFAULT=saved
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR='Manjaro'
GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet acpi_osi=! acpi_osi='Windows 2009' &quot;
GRUB_CMDLINE_LINUX=&quot;reboot=bios&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 28 May 2019 20:33:00 +0800</pubDate>
        <link>http://localhost:4000/2019/05/28/manjaro-note/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/28/manjaro-note/</guid>
        
        <category>Linux</category>
        
        
      </item>
    
      <item>
        <title>Dawnk's Hello</title>
        <description>&lt;h1 id=&quot;并非初次的自我介绍&quot;&gt;并非初次的自我介绍&lt;/h1&gt;

&lt;p&gt;不是第一次搭建博客了,上一次用WordPress搭建的博客在服务器到期之后也就自动放弃了,这次采用的github让博客产生了稍微geek一些的感觉&lt;/p&gt;

&lt;p&gt;目前还只是测试阶段,后续考虑域名和服务器的问题,不过我觉得github更稳定一些,也更通用(起码不会宕机吧),域名的话因为经济问题实在是让我有些纠结..纠结&lt;/p&gt;

&lt;p&gt;这个博客的建立得到了Hux的开源项目的支持,他的博客给出了详细的配置,其博客我已经放在友情链接里面了.&lt;/p&gt;

&lt;p&gt;来日方长,我们日后再聊.&lt;/p&gt;

</description>
        <pubDate>Sun, 26 May 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/05/26/DawnkHello/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/26/DawnkHello/</guid>
        
        <category>Blog</category>
        
        
      </item>
    
      <item>
        <title>Welcome to Hux Blog</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Yeah It’s on. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;Hux 的 Blog 就这么开通了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#build&quot;&gt;跳过废话，直接看技术实现 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2015 年，Hux 总算有个地方可以好好写点东西了。&lt;/p&gt;

&lt;p&gt;作为一个程序员， Blog 这种轮子要是挂在大众博客程序上就太没意思了。一是觉得大部分 Blog 服务都太丑，二是觉得不能随便定制不好玩。之前因为太懒没有折腾，结果就一直连个写 Blog 的地儿都没有。&lt;/p&gt;

&lt;p&gt;在玩了一段时间知乎之后，答题的快感又激起了我开博客的冲动。之前的&lt;a href=&quot;http://huangxuan.me/portfolio&quot;&gt;个人网站&lt;/a&gt;是作品集形式的（现在集成进来了），并不适合用来写博文，一不做二不休，花一天搞一个吧！&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;

&lt;p&gt;接下来说说搭建这个博客的技术细节。&lt;/p&gt;

&lt;p&gt;正好之前就有关注过 &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; 快速 Building Blog 的技术方案，非常轻松时尚。&lt;/p&gt;

&lt;p&gt;其优点非常明显：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 带来的优雅写作体验&lt;/li&gt;
  &lt;li&gt;非常熟悉的 Git workflow ，&lt;strong&gt;Git Commit 即 Blog Post&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机
    &lt;ul&gt;
      &lt;li&gt;如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Jekyll 的自定制非常容易，基本就是个模版引擎&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本来觉得最大的缺点可能是 GitHub 在国内访问起来太慢，所以第二天一起床就到 GitCafe(Chinese GitHub Copy) 迁移了一个&lt;a href=&quot;http://huxpro.gitcafe.io&quot;&gt;镜像&lt;/a&gt;出来，结果还是巨慢。&lt;/p&gt;

&lt;p&gt;哥哥可是个前端好嘛！ 果断开 Chrome DevTool 查了下网络请求，原来是 &lt;strong&gt;pending 在了 Google Fonts&lt;/strong&gt; 上，页面渲染一直被阻塞到请求超时为止，难怪这么慢。&lt;br /&gt;
忍痛割爱，只好把 Web Fonts 去了（反正超时看到的也只能是 fallback ），果然一下就正常了，而且 GitHub 和 GitCafe 对比并没有感受到明显的速度差异，虽然 github 的 ping 值明显要高一些，达到了 300ms，于是用 DNSPOD 优化了一下速度。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;配置的过程中也没遇到什么坑，基本就是 Git 的流程，相当顺手&lt;/p&gt;

&lt;p&gt;大的 Jekyll 主题上直接 fork 了 Clean Blog（这个主题也相当有名，就不多赘述了。唯一的缺点大概就是没有标签支持，于是我给它补上了。）&lt;/p&gt;

&lt;p&gt;本地调试环境需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt;，结果 rubygem 的源居然被墙了……后来手动改成了我大淘宝的镜像源才成功&lt;/p&gt;

&lt;p&gt;Theme 的 CSS 是基于 Bootstrap 定制的，看得不爽的地方直接在 Less 里改就好了（平时更习惯 SCSS 些），&lt;strong&gt;不过其实我一直觉得 Bootstrap 在移动端的体验做得相当一般，比我在淘宝参与的团队 CSS 框架差多了……&lt;/strong&gt;所以为了体验，也补了不少 CSS 进去&lt;/p&gt;

&lt;p&gt;最后就进入了耗时反而最长的&lt;strong&gt;做图、写字&lt;/strong&gt;阶段，也算是进入了&lt;strong&gt;写博客&lt;/strong&gt;的正轨，因为是类似 Hack Day 的方式去搭这个站的，所以折腾折腾着大半夜就过去了。&lt;/p&gt;

&lt;p&gt;第二天考虑中文字体的渲染，fork 了 &lt;a href=&quot;http://www.typeisbeautiful.com/&quot;&gt;Type is Beautiful&lt;/a&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;font&lt;/code&gt; CSS，调整了字号，适配了 Win 的渣渲染，中英文混排效果好多了。&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;回顾这个博客的诞生，纯粹是出于个人兴趣。在知乎相关问题上回答并获得一定的 star 后，我决定把这个博客主题当作一个小小的开源项目来维护。&lt;/p&gt;

&lt;p&gt;在经历 v1.0 - v1.5 的蜕变后，这个博客主题愈发完整，不但增加了诸多 UI 层的优化（opinionated）；在代码层面，更加丰富的配置项也使得这个主题拥有了更好的灵活性与可拓展性。而作为一个开源项目，我也积极的为其完善文档与解决 issue。&lt;/p&gt;

&lt;p&gt;如果你恰好逛到了这里，希望你也能喜欢这个博客主题。&lt;/p&gt;

&lt;p&gt;—— Hux 后记于 2015.10&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Jan 2015 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2015/01/29/hello-2015/</link>
        <guid isPermaLink="true">http://localhost:4000/2015/01/29/hello-2015/</guid>
        
        <category>生活</category>
        
        
      </item>
    
  </channel>
</rss>
